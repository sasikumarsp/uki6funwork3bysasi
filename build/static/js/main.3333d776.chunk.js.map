{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","winLine","this","key","squares","includes","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","isAscending","slice","length","calculateWinner","winner","setState","concat","latestMoveSquare","step","status","current","winInfo","moves","map","move","col","Math","floor","desc","jumpTo","isDraw","reverse","id","type","placeholder","style","class","name","handleClick","line","handleSortToggle","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3333d776.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './addplayers'\n\nfunction Square(props) {\n    const className = 'square' + (props.highlight ? ' highlight' : '');\n    return (\n        <button\n            className={className}\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        const winLine = this.props.winLine;\n        return (\n            <Square\n                key={i}\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                highlight={winLine && winLine.includes(i)}\n            />\n        );\n    }\n\n    render() {\n        // Use two loops to make the squares\n        const boardSize = 3;\n        let squares = [];\n        for (let i = 0; i < boardSize; ++i) {\n            let row = [];\n            for (let j = 0; j < boardSize; ++j) {\n                row.push(this.renderSquare(i * boardSize + j));\n            }\n            squares.push(<div key={i} className=\"board-row\">{row}</div>);\n        }\n\n        return (\n            <div>\n                {squares}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: Array(9).fill(null)\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true,\n            isAscending: true,\n        };\n\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares).winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares,\n                    // Store the index of the latest moved square\n                    latestMoveSquare: i\n                }\n            ]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n\n    handleSortToggle() {\n        this.setState({\n            isAscending: !this.state.isAscending\n        });\n    }\n\n\n    render() {\n        const history = this.state.history;\n        const stepNumber = this.state.stepNumber;\n        const current = history[stepNumber];\n        const winInfo = calculateWinner(current.squares);\n        const winner = winInfo.winner;\n\n        let moves = history.map((step, move) => {\n            const latestMoveSquare = step.latestMoveSquare;\n            const col = 1 + latestMoveSquare % 3;\n            const row = 1 + Math.floor(latestMoveSquare / 3);\n            const desc = move ?\n                `Go to move #${move} (${col}, ${row})` :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    {/* Bold the currently selected item */}\n                    <button\n                        className={move === stepNumber ? 'move-list-item-selected' : ''}\n                        onClick={() => this.jumpTo(move)}>{desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + winner;\n        } else {\n            if (winInfo.isDraw) {\n                status = \"Draw\";\n            } else {\n                status = \"Next player: \" + (this.state.xIsNext ? \"player1\" : \"player2\");\n            }\n        }\n\n        const isAscending = this.state.isAscending;\n        if (!isAscending) {\n            moves.reverse();\n        }\n\n        return (\n            <div className=\"main\">\n                <div className=\"heading\">\n                    <h1>Tic Tac Toe</h1>\n                </div>\n                <div>\n                    <div id=\"id\">\n                        <h2>Enther Your Name</h2>\n                    </div>\n                    <form>\n                        <input id=\"Player1\" type=\"text\" placeholder=\"Player1\"></input>\n                        <input id=\"Player2\" type=\"text\" placeholder=\"Player2\"></input>\n                        <button style=\"--content: 'Start';\" type=\"button\" class=\" btn-primary\" onClick=\"showPlayer()\" name=\"button\">\n                            <div class=\"left\"></div>\n                                Start\n                            <div class=\"right\"></div>\n                        </button>\n                    </form>\n                </div>\n                <div id=\"player\"></div>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board\n                            squares={current.squares}\n                            onClick={i => this.handleClick(i)}\n                            winLine={winInfo.line}\n                        />\n                    </div>\n                    <div className=\"game-info\">\n                        <div>{status}</div>\n                        <button onClick={() => this.handleSortToggle()}>\n                            {isAscending ? 'descending' : 'ascending'}\n                        </button>\n                        <ol>{moves}</ol>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                winner: squares[a],\n                line: lines[i],\n                isDraw: false,\n            };\n        }\n    }\n\n    let isDraw = true;\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] === null) {\n            isDraw = false;\n            break;\n        }\n    }\n    return {\n        winner: null,\n        line: null,\n        isDraw: isDraw,\n    };\n}\n"],"sourceRoot":""}