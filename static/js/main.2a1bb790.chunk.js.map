{"version":3,"sources":["addplayers.js","index.js"],"names":["Component","Square","props","className","highlight","onClick","value","Board","i","winLine","this","key","squares","includes","row","j","push","renderSquare","React","Game","state","history","Array","fill","stepNumber","xIsNext","isAscending","slice","length","calculateWinner","winner","setState","concat","latestMoveSquare","step","current","winInfo","player1","document","getElementById","player2","innerHTML","status","moves","map","move","col","Math","floor","desc","jumpTo","isDraw","reverse","handleClick","line","id","lines","a","b","c","ReactDOM","render"],"mappings":"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","file":"static/js/main.2a1bb790.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass AddName extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n\n        this.props.onAdd(this.player1Input.value, this.player2Input.value);\n\n        this.player1Input.value = '';\n        this.player2Input.value = '';\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit}>\n                <h3>Enter Your Names</h3>\n                <input placeholder=\"Player1\" ref={player1Input => this.player1Input = player1Input} />\n                <input placeholder=\"Player2\" ref={player2Input => this.player2Input = player2Input} />\n                <button>Start</button>\n\n                <hr />\n            </form>\n        )\n    }\n}\n\nexport default AddName;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport AddName from './addplayers'\n\nfunction Square(props) {\n    const className = 'square' + (props.highlight ? ' highlight' : '');\n    return (\n        <button\n            className={className}\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        const winLine = this.props.winLine;\n        return (\n            <Square\n                key={i}\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                highlight={winLine && winLine.includes(i)}\n            />\n        );\n    }\n\n    render() {\n        // Use two loops to make the squares\n        const boardSize = 3;\n        let squares = [];\n        for (let i = 0; i < boardSize; ++i) {\n            let row = [];\n            for (let j = 0; j < boardSize; ++j) {\n                row.push(this.renderSquare(i * boardSize + j));\n            }\n            squares.push(<div key={i} className=\"board-row\">{row}</div>);\n        }\n\n        return (\n            <div>\n                {squares}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: Array(9).fill(null)\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true,\n            isAscending: true,\n        };\n\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares).winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares,\n                    // Store the index of the latest moved square\n                    latestMoveSquare: i\n                }\n            ]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n\n    handleSortToggle() {\n        this.setState({\n            isAscending: !this.state.isAscending\n        });\n    }\n\n\n    render() {\n        const history = this.state.history;\n        const stepNumber = this.state.stepNumber;\n        const current = history[stepNumber];\n        const winInfo = calculateWinner(current.squares);\n        const winner = winInfo.winner;\n        var player1 = document.getElementById('player1').value;\n        var player2 = document.getElementById('player2').value;\n        document.getElementById('player').innerHTML = \"<div>\" + \"player1: \" + player1 + \"</div>\" + \"<div>\" + \"player2: \" + player2 + \"</div>\";\n\n        let moves = history.map((step, move) => {\n            const latestMoveSquare = step.latestMoveSquare;\n            const col = 1 + latestMoveSquare % 3;\n            const row = 1 + Math.floor(latestMoveSquare / 3);\n            const desc = move ?\n                `Go to move #${move} (${col}, ${row})` :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    {/* Bold the currently selected item */}\n                    <button\n                        className={move === stepNumber ? 'move-list-item-selected' : ''}\n                        onClick={() => this.jumpTo(move)}>{desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + (this.state.xIsNext ? player2 : player1);\n        } else {\n            if (winInfo.isDraw) {\n                status = \"Draw\";\n            } else {\n                status = \"Next player: \" + (this.state.xIsNext ? player1 : player2);\n            }\n        }\n\n        const isAscending = this.state.isAscending;\n        if (!isAscending) {\n            moves.reverse();\n        }\n\n        return (\n            <div className=\"main\">\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board\n                            squares={current.squares}\n                            onClick={i => this.handleClick(i)}\n                            winLine={winInfo.line}\n                        />\n                    </div>\n                    <div className=\"game-info\">\n                        <div>{status}</div>\n                        <button id=\"button\">\n                            Restart\n                        </button>\n                        <ol>{moves}</ol>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                winner: squares[a],\n                line: lines[i],\n                isDraw: false,\n            };\n        }\n    }\n\n    let isDraw = true;\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] === null) {\n            isDraw = false;\n            break;\n        }\n    }\n    return {\n        winner: null,\n        line: null,\n        isDraw: isDraw,\n    };\n}\n"],"sourceRoot":""}